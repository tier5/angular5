{"version":3,"sources":["/home/tier5/Projects/web/3c/resources/assets/frontend/src/app/core/layout/inner-pages/profile/profile-routing.module.ts","/home/tier5/Projects/web/3c/resources/assets/frontend/src/app/core/layout/inner-pages/profile/profile.component.css","/home/tier5/Projects/web/3c/resources/assets/frontend/src/app/core/layout/inner-pages/profile/profile.component.html","/home/tier5/Projects/web/3c/resources/assets/frontend/src/app/core/layout/inner-pages/profile/profile.component.ts","/home/tier5/Projects/web/3c/resources/assets/frontend/src/app/core/layout/inner-pages/profile/profile.module.ts"],"names":[],"mappings":"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","file":"profile.module.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router'\nimport { ProfileComponent } from './profile.component'\n\n\nconst profileRoutes: Routes = [\n  { path: '', component: ProfileComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(profileRoutes) ],\n  exports: [RouterModule]\n})\nexport class ProfileRoutingModule { }\n\n\n// WEBPACK FOOTER //\n// /home/tier5/Projects/web/3c/resources/assets/frontend/src/app/core/layout/inner-pages/profile/profile-routing.module.ts","exports = module.exports = require(\"../../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"a {\\n    cursor: pointer;\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/tier5/Projects/web/3c/resources/assets/frontend/src/app/core/layout/inner-pages/profile/profile.component.css\n// module id = ../../../../../src/app/core/layout/inner-pages/profile/profile.component.css\n// module chunks = profile.module","module.exports = \"<div class=\\\"content-wrapper\\\">\\n    <!-- Content Header (Page header) -->\\n    <section class=\\\"content-header\\\">\\n        <h1>\\n            User Profile\\n        </h1>\\n        <ol class=\\\"breadcrumb\\\">\\n            <li><a ><i class=\\\"fa fa-dashboard\\\"></i> Home</a></li>\\n            <li><a >Examples</a></li>\\n            <li class=\\\"active\\\">User profile</li>\\n        </ol>\\n    </section>\\n\\n    <!-- Main content -->\\n    <section class=\\\"content\\\">\\n\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-3\\\">\\n\\n                <!-- Profile Image -->\\n                <div class=\\\"box box-primary\\\">\\n                    <div class=\\\"box-body box-profile\\\">\\n                        <img class=\\\"profile-user-img img-responsive img-circle\\\" src=\\\"../../../../../assets/img/avatar5.png\\\" alt=\\\"User profile picture\\\">\\n\\n                        <h3 class=\\\"profile-username text-center\\\">Jon Vaughn</h3>\\n\\n                        <p class=\\\"text-muted text-center\\\">Super Admin</p>\\n\\n                        <!--<ul class=\\\"list-group list-group-unbordered\\\">-->\\n                            <!--<li class=\\\"list-group-item\\\">-->\\n                                <!--<b>Followers</b> <a class=\\\"pull-right\\\">1,322</a>-->\\n                            <!--</li>-->\\n                            <!--<li class=\\\"list-group-item\\\">-->\\n                                <!--<b>Following</b> <a class=\\\"pull-right\\\">543</a>-->\\n                            <!--</li>-->\\n                            <!--<li class=\\\"list-group-item\\\">-->\\n                                <!--<b>Friends</b> <a class=\\\"pull-right\\\">13,287</a>-->\\n                            <!--</li>-->\\n                        <!--</ul>-->\\n\\n                        <!--<a href=\\\"#\\\" class=\\\"btn btn-primary btn-block\\\"><b>Follow</b></a>-->\\n                    </div>\\n                    <!-- /.box-body -->\\n                </div>\\n                <!-- /.box -->\\n\\n            </div>\\n            <!-- /.col -->\\n            <div class=\\\"col-md-9\\\">\\n                <div class=\\\"nav-tabs-custom\\\">\\n                    <ul class=\\\"nav nav-tabs\\\">\\n                        <li [ngClass]=\\\"{active: selectedTab}\\\"><a data-toggle=\\\"tab\\\" (click)=\\\"toggleSelectedTab()\\\">Account Info</a></li>\\n                        <li [ngClass]=\\\"{active: !selectedTab}\\\"><a data-toggle=\\\"tab\\\" (click)=\\\"toggleSelectedTab()\\\">Change Password</a></li>\\n                    </ul>\\n                    <div class=\\\"tab-content\\\">\\n                        <div class=\\\"tab-pane active\\\" *ngIf=\\\"selectedTab\\\" id=\\\"info\\\">\\n                            <form [formGroup]=\\\"profileForm\\\" (submit)=\\\"onUpdateInfo()\\\" class=\\\"form-horizontal\\\">\\n\\n                                <!-- First Name -->\\n                                <div class=\\\"form-group\\\" [ngClass]=\\\"{ 'has-error': profileForm.get('firstName').invalid && profileForm.get('firstName').touched && profileForm.get('firstName').hasError('required') }\\\">\\n                                    <label for=\\\"fName\\\" class=\\\"col-sm-2 control-label\\\">\\n                                        <i *ngIf=\\\"profileForm.get('firstName').invalid && profileForm.get('firstName').touched && profileForm.get('firstName').hasError('required')\\\" class=\\\"fa fa-times-circle-o\\\"></i>\\n                                         First Name\\n                                    </label>\\n                                    <div class=\\\"col-sm-10\\\">\\n                                        <input type=\\\"text\\\"\\n                                               class=\\\"form-control\\\"\\n                                               id=\\\"fName\\\"\\n                                               formControlName=\\\"firstName\\\"\\n                                        >\\n                                        <span *ngIf=\\\"profileForm.get('firstName').invalid && profileForm.get('firstName').touched && profileForm.get('firstName').hasError('required')\\\" class=\\\"help-block\\\">Your First Name is Required!</span>\\n                                    </div>\\n                                </div>\\n\\n                                <!-- Last Name -->\\n                                <div class=\\\"form-group\\\" [ngClass]=\\\"{ 'has-error': profileForm.get('lastName').invalid && profileForm.get('lastName').touched && profileForm.get('lastName').hasError('required') }\\\">\\n                                    <label for=\\\"lName\\\" class=\\\"col-sm-2 control-label\\\">\\n                                        <i *ngIf=\\\"profileForm.get('lastName').invalid && profileForm.get('lastName').touched && profileForm.get('lastName').hasError('required')\\\" class=\\\"fa fa-times-circle-o\\\"></i>\\n                                         Last Name\\n                                    </label>\\n                                    <div class=\\\"col-sm-10\\\">\\n                                        <input type=\\\"email\\\"\\n                                               class=\\\"form-control\\\"\\n                                               id=\\\"lName\\\"\\n                                               formControlName=\\\"lastName\\\"\\n                                        >\\n                                        <span *ngIf=\\\"profileForm.get('lastName').invalid && profileForm.get('lastName').touched && profileForm.get('lastName').hasError('required')\\\" class=\\\"help-block\\\">Your Last Name is Required!</span>\\n                                    </div>\\n                                </div>\\n\\n                                <!-- User Name -->\\n                                <div class=\\\"form-group\\\" [ngClass]=\\\"{ 'has-error': profileForm.get('userName').invalid && profileForm.get('userName').touched && profileForm.get('userName').hasError('required') }\\\">\\n                                    <label for=\\\"userName\\\" class=\\\"col-sm-2 control-label\\\">\\n                                        <i *ngIf=\\\"profileForm.get('userName').invalid && profileForm.get('userName').touched && profileForm.get('userName').hasError('required')\\\" class=\\\"fa fa-times-circle-o\\\"></i>\\n                                         User Name\\n                                    </label>\\n                                    <div class=\\\"col-sm-10\\\">\\n                                        <input type=\\\"text\\\"\\n                                               class=\\\"form-control\\\"\\n                                               id=\\\"userName\\\"\\n                                               formControlName=\\\"userName\\\"\\n                                               placeholder=\\\"Name\\\"\\n                                        >\\n                                        <span *ngIf=\\\"profileForm.get('userName').invalid && profileForm.get('userName').touched && profileForm.get('userName').hasError('required') && profileForm.get('userName').hasError('required')\\\" class=\\\"help-block\\\">Your User Name is Required!</span>\\n                                    </div>\\n                                </div>\\n\\n                                <!-- Email -->\\n                                <div class=\\\"form-group\\\" [ngClass]=\\\"{ 'has-error': profileForm.get('email').invalid && profileForm.get('email').touched }\\\">\\n                                    <label for=\\\"email\\\" class=\\\"col-sm-2 control-label\\\">\\n                                        <i *ngIf=\\\"profileForm.get('email').invalid && profileForm.get('email').touched\\\" class=\\\"fa fa-times-circle-o\\\"></i>\\n                                         Email\\n                                    </label>\\n                                    <div class=\\\"col-sm-10\\\">\\n                                        <input type=\\\"text\\\"\\n                                               class=\\\"form-control\\\"\\n                                               id=\\\"email\\\"\\n                                               formControlName=\\\"email\\\"\\n                                               placeholder=\\\"Name\\\"\\n                                        >\\n                                        <span *ngIf=\\\"profileForm.get('email').invalid && profileForm.get('email').touched && profileForm.get('email').hasError('email')\\\" class=\\\"help-block\\\">Enter a Proper Email Address!</span>\\n                                        <span *ngIf=\\\"profileForm.get('email').invalid && profileForm.get('email').touched && profileForm.get('email').hasError('required')\\\" class=\\\"help-block\\\">Your Email Address is Required!</span>\\n                                    </div>\\n                                </div>\\n\\n                                <!-- Phone No -->\\n                                <div class=\\\"form-group\\\" [ngClass]=\\\"{ 'has-error': profileForm.get('phone').invalid && profileForm.get('phone').touched }\\\">\\n                                    <label for=\\\"phoneNo\\\" class=\\\"col-sm-2 control-label\\\">\\n                                        <i *ngIf=\\\"profileForm.get('phone').invalid && profileForm.get('phone').touched\\\" class=\\\"fa fa-times-circle-o\\\"></i>\\n                                         Phone No\\n                                    </label>\\n                                    <div class=\\\"col-sm-10\\\">\\n                                        <input type=\\\"text\\\"\\n                                               class=\\\"form-control\\\"\\n                                               id=\\\"phoneNo\\\"\\n                                               [textMask]=\\\"{mask: mask, guide: false}\\\"\\n                                               formControlName=\\\"phone\\\"\\n                                               placeholder=\\\"PhoneNo\\\"\\n                                        >\\n                                        <span *ngIf=\\\"profileForm.get('phone').invalid && profileForm.get('phone').touched && profileForm.get('phone').hasError('required')\\\" class=\\\"help-block\\\">Your Password is Required!</span>\\n                                        <span *ngIf=\\\"profileForm.get('phone').invalid && profileForm.get('phone').touched && profileForm.get('phone').hasError('minlength')\\\" class=\\\"help-block\\\">Your Phone Number should be at least 10 Digits Long!</span>\\n                                    </div>\\n                                </div>\\n\\n                                <!-- Submit -->\\n                                <div class=\\\"form-group\\\">\\n                                    <div class=\\\"col-sm-offset-2 col-sm-10\\\">\\n                                        <button type=\\\"submit\\\" class=\\\"btn btn-danger\\\" [disabled]=\\\"profileForm.invalid\\\">Submit</button>\\n                                    </div>\\n                                </div>\\n\\n                            </form>\\n                        </div>\\n                        <div class=\\\"tab-pane active\\\" *ngIf=\\\"!selectedTab\\\" id=\\\"password\\\">\\n                            <form [formGroup]=\\\"passwordForm\\\" (submit)=\\\"onUpdatePassword()\\\" class=\\\"form-horizontal\\\">\\n\\n                                <!-- Password -->\\n                                <div class=\\\"form-group\\\" [ngClass]=\\\"{ 'has-error': passwordForm.get('password').invalid && passwordForm.get('password').touched }\\\">\\n                                    <label for=\\\"pass\\\" class=\\\"col-sm-2 control-label\\\">\\n                                        <i *ngIf=\\\"passwordForm.get('password').invalid && passwordForm.get('password').touched\\\" class=\\\"fa fa-times-circle-o\\\"></i>\\n                                         Password\\n                                    </label>\\n                                    <div class=\\\"col-sm-10\\\">\\n                                        <input type=\\\"password\\\"\\n                                               class=\\\"form-control\\\"\\n                                               id=\\\"pass\\\"\\n                                               formControlName=\\\"password\\\"\\n                                        >\\n                                        <span *ngIf=\\\"passwordForm.get('password').invalid && passwordForm.get('password').touched && passwordForm.get('password').hasError('required')\\\" class=\\\"help-block\\\">Your Password is Required!</span>\\n                                        <span *ngIf=\\\"passwordForm.get('password').invalid && passwordForm.get('password').touched && passwordForm.get('password').hasError('minlength')\\\" class=\\\"help-block\\\">Your Password is Required!</span>\\n                                    </div>\\n                                </div>\\n\\n                                <!-- Confirm Password -->\\n                                <div class=\\\"form-group\\\" [ngClass]=\\\"{ 'has-error': passwordForm.get('confPassword').invalid && passwordForm.get('confPassword').touched }\\\">\\n                                    <label for=\\\"cnfPass\\\" class=\\\"col-sm-2 control-label\\\">\\n                                        <i *ngIf=\\\"passwordForm.get('confPassword').invalid && passwordForm.get('confPassword').touched\\\" class=\\\"fa fa-times-circle-o\\\"></i>\\n                                         Confirm Password\\n                                    </label>\\n                                    <div class=\\\"col-sm-10\\\">\\n                                        <input type=\\\"password\\\"\\n                                               class=\\\"form-control\\\"\\n                                               id=\\\"cnfPass\\\"\\n                                               formControlName=\\\"confPassword\\\"\\n                                        >\\n                                        <span *ngIf=\\\"passwordForm.get('confPassword').invalid && passwordForm.get('confPassword').touched && passwordForm.get('confPassword').hasError('required')\\\" class=\\\"help-block\\\">Confirm Password is Required!</span>\\n                                        <span *ngIf=\\\"passwordForm.get('confPassword').invalid && passwordForm.get('confPassword').touched && passwordForm.get('confPassword').hasError('confirmPassword')\\\" class=\\\"help-block\\\">Confirm Password did not Match!</span>\\n                                    </div>\\n                                </div>\\n\\n                                <!-- Submit -->\\n                                <div class=\\\"form-group\\\">\\n                                    <div class=\\\"col-sm-offset-2 col-sm-10\\\">\\n                                        <button type=\\\"submit\\\" class=\\\"btn btn-danger\\\" [disabled]=\\\"passwordForm.invalid\\\">Submit</button>\\n                                    </div>\\n                                </div>\\n\\n                            </form>\\n                        </div>\\n                        <!-- /.tab-pane -->\\n                    </div>\\n                    <!-- /.tab-content -->\\n                </div>\\n                <!-- /.nav-tabs-custom -->\\n            </div>\\n            <!-- /.col -->\\n        </div>\\n        <!-- /.row -->\\n\\n    </section>\\n    <!-- /.content -->\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/tier5/Projects/web/3c/resources/assets/frontend/src/app/core/layout/inner-pages/profile/profile.component.html\n// module id = ../../../../../src/app/core/layout/inner-pages/profile/profile.component.html\n// module chunks = profile.module","import { AbstractControl, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Component, OnDestroy, OnInit } from '@angular/core'\nimport { Store } from '@ngrx/store';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport * as fromAfterLogin from '../../store/after-login.reducers';\nimport * as ProfileActions from '../../store/profile/profile.actions';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit, OnDestroy {\n\n  /** Variable declarations */\n  profileForm: FormGroup;\n  passwordForm: FormGroup;\n  profileSubscription1: Subscription;\n  profileSubscription2: Subscription;\n  mask: Array<string | RegExp> = ['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/];\n  selectedTab: boolean = true;\n\n  /** Service injection */\n  constructor(private formBuilder: FormBuilder,\n              private store: Store<fromAfterLogin.AfterLoginFeatureState>) { }\n\n  /** Function to be executed when component initializes */\n  ngOnInit () {\n    this.store.dispatch(new ProfileActions.GetProfileAttempt());\n    /** Profile form initialization */\n    this.profileForm = new FormGroup({\n      'userId': new FormControl(null, Validators.required),\n      'firstName': new FormControl(null, Validators.required),\n      'lastName': new FormControl(null, Validators.required),\n      'userName': new FormControl(null, Validators.required),\n      'phone': new FormControl(null, [Validators.required, Validators.minLength(14)]),\n      'email': new FormControl({value: null, disabled: true}, [Validators.required, Validators.email])\n    });\n    /** Password form initialization */\n    this.passwordForm = this.formBuilder.group({\n      'userId': new FormControl(null),\n      'password': new FormControl(null, [Validators.required, Validators.minLength(6)]),\n      'confPassword': new FormControl(null)\n    }, {validator: this.confirmPassword});\n\n    this.profileSubscription1 = this.store.select('afterLogin')\n      .map(data => data.profile.resetChangePasswordForm)\n      .subscribe(\n        (afterLogin) => {\n          if(afterLogin) {\n            this.passwordForm.reset();\n            this.store.dispatch(new ProfileActions.EditProfileChangePasswordSuccess(false));\n          }\n        }\n      );\n\n    this.profileSubscription2 = this.store.select('afterLogin')\n      .map(data => data.profile.data)\n      .subscribe(\n        (afterLogin) => {\n          this.passwordForm.reset();\n          if(afterLogin && afterLogin.user_info) {\n            const uInfo = afterLogin.user_info;\n            this.profileForm.patchValue({\n              userId: uInfo.id,\n              firstName: uInfo.first_name,\n              lastName: uInfo.last_name,\n              userName: uInfo.username,\n              phone: uInfo.phone,\n              email: uInfo.email\n            });\n            this.passwordForm.patchValue({\n              userId: uInfo.id\n            });\n          }\n        }\n      );\n  }\n\n  /** Custom confirm password validator */\n  confirmPassword = (control: AbstractControl): { [key: string]: boolean } => {\n    const pass = control.get('password')\n    const cnfPass = control.get('confPassword')\n    if (!pass || !cnfPass) {\n      return null\n    }\n    if (pass.value === cnfPass.value) {\n      return null\n    } else {\n      control.get('confPassword').setErrors({confirmPassword: true})\n      return {confirmPassword: true}\n    }\n  }\n\n  /** Function call to update info */\n  onUpdateInfo() {\n    this.store.dispatch(new ProfileActions.EditProfileAttempt(this.profileForm.value));\n  }\n\n  /** Function call to update password */\n  onUpdatePassword() {\n    this.store.dispatch(new ProfileActions.EditProfileChangePasswordAttempt(this.passwordForm.value));\n  }\n\n  /** Function call to highlight the selected tab */\n  toggleSelectedTab() {\n    this.selectedTab = !this.selectedTab;\n  }\n\n  /** Un-subscribing from all custom made events when component is destroyed */\n  ngOnDestroy() {\n    this.profileSubscription1.unsubscribe();\n    this.profileSubscription2.unsubscribe();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/tier5/Projects/web/3c/resources/assets/frontend/src/app/core/layout/inner-pages/profile/profile.component.ts","import { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { TextMaskModule } from 'angular2-text-mask';\n\nimport { ProfileComponent } from './profile.component';\nimport { ProfileRoutingModule } from './profile-routing.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ProfileRoutingModule,\n    ReactiveFormsModule,\n    TextMaskModule\n  ],\n  declarations: [ProfileComponent]\n})\nexport class ProfileModule { }\n\n\n\n// WEBPACK FOOTER //\n// /home/tier5/Projects/web/3c/resources/assets/frontend/src/app/core/layout/inner-pages/profile/profile.module.ts"],"sourceRoot":"webpack:///"}